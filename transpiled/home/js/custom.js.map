{"version":3,"sources":["../../../home/js/custom.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","CLIENT_ID","firebase","initializeApp","window","onGoogleYoloLoad","googleyolo","retrievePromise","retrieve","supportedAuthMethods","supportedIdTokenProviders","uri","clientId","error","type","hint","then","credential","idToken","useGoogleIdTokenForAuth","auth","onAuthStateChanged","user","console","log","location","href","uiConfig","signInOptions","GoogleAuthProvider","PROVIDER_ID","TwitterAuthProvider","EmailAuthProvider","PhoneAuthProvider","tosUrl","signInSuccessUrl","setPersistence","Auth","Persistence","LOCAL","ui","firebaseui","AuthUI","start","catch","code","message","$","hide","showDefaultNtf","on","e","css","click","setting","newest_on_top","delay","notify","title"],"mappings":";;AAAA,IAAIA,SAAS;AACTC,YAAQ,yCADC;AAETC,gBAAY,8BAFH;AAGTC,iBAAa,qCAHJ;AAITC,eAAW,cAJF;AAKTC,mBAAe,0BALN;AAMTC,uBAAmB;AANV,CAAb;;AASA,IAAMC,YAAY,yEAAlB;;AAEAC,SAASC,aAAT,CAAuBT,MAAvB;;AAEAU,OAAOC,gBAAP,GAA0B,UAACC,UAAD,EAAgB;AACtC;AACA,QAAMC,kBAAkBD,WAAWE,QAAX,CAAoB;AACxCC,8BAAsB,CAClB,6BADkB,EAElB,8BAFkB,CADkB;AAKxCC,mCAA2B,CACvB;AACIC,iBAAK,6BADT;AAEIC,sBAAU;AAFd,SADuB;AALa,KAApB,CAAxB;;AAaA,QAAIC,MAAMC,IAAN,KAAe,wBAAnB,EAA6C;AACzCR,mBAAWS,IAAX,CAAgB;AACZN,kCAAsB,CAClB,6BADkB,CADV;AAIZC,uCAA2B,CACvB;AACIC,qBAAK,6BADT;AAEIC,0BAAU;AAFd,aADuB;AAJf,SAAhB,EAUGI,IAVH,CAUQ,UAACC,UAAD,EAAgB;AACpB,gBAAIA,WAAWC,OAAf,EAAwB;AACpB;AACAC,wCAAwBF,WAAWC,OAAnC;AACH;AACJ,SAfD,EAeG,UAACL,KAAD,EAAW;AACV,oBAAQA,MAAMC,IAAd;AACI,qBAAK,cAAL;AACI;AACA;AACA;AACJ,qBAAK,wBAAL;AACI;AACA;AACA;AACJ,qBAAK,eAAL;AACI;AACA;AACA;AACJ,qBAAK,mBAAL;AACI;AACA;AACJ,qBAAK,0BAAL;AACI;AACA;AACJ,qBAAK,qBAAL;AACI;AACA;AACJ,qBAAK,oBAAL;AACI;AACA;AACJ;AACA;AA1BJ;AA4BH,SA5CD;AA6CH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAtGD;;AAwGAZ,SAASkB,IAAT,GAAgBC,kBAAhB,CAAmC,gBAAQ;AACvC,QAAGC,IAAH,EAAS;AACLC,gBAAQC,GAAR,CAAY,oBAAZ,EAAkC,YAAlC;AACApB,eAAOqB,QAAP,CAAgBC,IAAhB,GAAuB,qBAAvB;AACH;AACJ,CALD;;AAOA,IAAIC,WAAW;AACX;AACAC,mBAAe;AACX;AACA1B,aAASkB,IAAT,CAAcS,kBAAd,CAAiCC,WAFtB,EAGX5B,SAASkB,IAAT,CAAcW,mBAAd,CAAkCD,WAHvB,EAIX5B,SAASkB,IAAT,CAAcY,iBAAd,CAAgCF,WAJrB,EAKX5B,SAASkB,IAAT,CAAca,iBAAd,CAAgCH,WALrB,CAFJ;AASX;AACAI,YAAQ,+IAVG;AAWXC,sBAAkB;AAXP,CAAf;;AAcAjC,SAASkB,IAAT,GAAgBgB,cAAhB,CAA+BlC,SAASkB,IAAT,CAAciB,IAAd,CAAmBC,WAAnB,CAA+BC,KAA9D,EACKvB,IADL,CACU,YAAW;AACb,QAAIwB,KAAK,IAAIC,WAAWrB,IAAX,CAAgBsB,MAApB,CAA2BxC,SAASkB,IAAT,EAA3B,CAAT;AACAoB,OAAGG,KAAH,CAAS,4BAAT,EAAuChB,QAAvC;AAEH,CALL,EAKOiB,KALP,CAKa,UAAS/B,KAAT,EAAgB;AACrBU,YAAQC,GAAR,CAAYX,MAAMgC,IAAlB,EAAwBhC,MAAMiC,OAA9B;AACAC,MAAE,QAAF,EAAYC,IAAZ;AACH,CARL;;AAUAC;;AAEAF,EAAE,gCAAF,EAAoCG,EAApC,CAAuC,OAAvC,EAAgD,UAAUC,CAAV,EAAa;AACzDJ,MAAE,IAAF,EAAQK,GAAR,CAAY,YAAZ,EAA0B,QAA1B;AACAL,MAAE,qDAAF,EAAyDM,KAAzD;AACA,WAAO,KAAP;AACH,CAJD;;AAMA,SAASJ,cAAT,GAA0B;AACtB,QAAIK,UAAU;AACVxC,cAAM,MADI;AAEVyC,uBAAe,IAFL;AAGVC,eAAO,CAAC;AAHE,KAAd;;AAMAT,MAAEU,MAAF,CAAS;AACLC,eAAO,kCADF;AAELZ,iBAAS;AAFJ,KAAT,EAGGQ,OAHH;AAIH","file":"custom.js","sourcesContent":["let config = {\r\n    apiKey: \"AIzaSyBQnxP9d4R40iogM5CP0_HVbULRxoD2_JM\",\r\n    authDomain: \"wordsupport3.firebaseapp.com\",\r\n    databaseURL: \"https://wordsupport3.firebaseio.com\",\r\n    projectId: \"wordsupport3\",\r\n    storageBucket: \"wordsupport3.appspot.com\",\r\n    messagingSenderId: \"60633268871\"\r\n};\r\n\r\nconst CLIENT_ID = \"60633268871-kf9j3roee7lk81521rs9r0vq77mrjagd.apps.googleusercontent.com\";\r\n\r\nfirebase.initializeApp(config);\r\n\r\nwindow.onGoogleYoloLoad = (googleyolo) => {\r\n    // The 'googleyolo' object is ready for use.\r\n    const retrievePromise = googleyolo.retrieve({\r\n        supportedAuthMethods: [\r\n            \"https://accounts.google.com\",\r\n            \"googleyolo://id-and-password\"\r\n        ],\r\n        supportedIdTokenProviders: [\r\n            {\r\n                uri: \"https://accounts.google.com\",\r\n                clientId: \"60633268871-kf9j3roee7lk81521rs9r0vq77mrjagd.apps.googleusercontent.com\"\r\n            }\r\n        ]\r\n    });\r\n\r\n    if (error.type === 'noCredentialsAvailable') {\r\n        googleyolo.hint({\r\n            supportedAuthMethods: [\r\n                \"https://accounts.google.com\"\r\n            ],\r\n            supportedIdTokenProviders: [\r\n                {\r\n                    uri: \"https://accounts.google.com\",\r\n                    clientId: \"60633268871-kf9j3roee7lk81521rs9r0vq77mrjagd.apps.googleusercontent.com\"\r\n                }\r\n            ]\r\n        }).then((credential) => {\r\n            if (credential.idToken) {\r\n                // Send the token to your auth backend.\r\n                useGoogleIdTokenForAuth(credential.idToken);\r\n            }\r\n        }, (error) => {\r\n            switch (error.type) {\r\n                case \"userCanceled\":\r\n                    // The user closed the hint selector. Depending on the desired UX,\r\n                    // request manual sign up or do nothing.\r\n                    break;\r\n                case \"noCredentialsAvailable\":\r\n                    // No hint available for the session. Depending on the desired UX,\r\n                    // request manual sign up or do nothing.\r\n                    break;\r\n                case \"requestFailed\":\r\n                    // The request failed, most likely because of a timeout.\r\n                    // You can retry another time if necessary.\r\n                    break;\r\n                case \"operationCanceled\":\r\n                    // The operation was programmatically canceled, do nothing.\r\n                    break;\r\n                case \"illegalConcurrentRequest\":\r\n                    // Another operation is pending, this one was aborted.\r\n                    break;\r\n                case \"initializationError\":\r\n                    // Failed to initialize. Refer to error.message for debugging.\r\n                    break;\r\n                case \"configurationError\":\r\n                    // Configuration error. Refer to error.message for debugging.\r\n                    break;\r\n                default:\r\n                // Unknown error, do nothing.\r\n            }\r\n        });\r\n    }\r\n\r\n    // retrievePromise.then((credential) => {\r\n    //     if (credential.password) {\r\n    //         // An ID (usually email address) and password credential was retrieved.\r\n    //         // Sign in to your backend using the password.\r\n    //         firebase.auth().signInWithEmailAndPassword(credential.id, credential.password).then(() => {\r\n    //             console.log(\"signInWithEmailAndPassword succeed\", credential.id, credential.password);\r\n    //\r\n    //         }).catch(function(error) {\r\n    //             //todo Handle Errors here.\r\n    //             let errorCode = error.code;\r\n    //             let errorMessage = error.message;\r\n    //\r\n    //         });\r\n    //         console.log(\"login succeed\", credential.id, credential.password);\r\n    //     } else {\r\n    //         // A Google Account is retrieved. Since Google supports ID token responses,\r\n    //         // you can use the token to sign in instead of initiating the Google sign-in\r\n    //         // flow.\r\n    //         firebase.auth().useGoogleIdTokenForAuth(credential.idToken).then(() => {\r\n    //             console.log(\"signInWithEmailAndPassword succeed\", credential.id, credential.password);\r\n    //\r\n    //         }).catch(function(error) {\r\n    //             //todo Handle Errors here.\r\n    //             let errorCode = error.code;\r\n    //             let errorMessage = error.message;\r\n    //         });\r\n    //         console.log(\"login succeed\", credential.idToken);\r\n    //     }\r\n    // }, (error) => {\r\n    //     //todo debug\r\n    //     // Credentials could not be retrieved. In general, if the user does not\r\n    //     // need to be signed in to use the page, you can just fail silently; or,\r\n    //     // you can also examine the error object to handle specific error cases.\r\n    //\r\n    //     // If retrieval failed because there were no credentials available, and\r\n    //     // signing in might be useful or is required to proceed from this page,\r\n    //     // you can call `hint()` to prompt the user to select an account to sign\r\n    //     // in or sign up with.\r\n    // });\r\n};\r\n\r\nfirebase.auth().onAuthStateChanged(user => {\r\n    if(user) {\r\n        console.log(\"onAuthStateChanged\", \"user login\");\r\n        window.location.href = \"./record/index.html\";\r\n    }\r\n});\r\n\r\nlet uiConfig = {\r\n    // signInSuccessUrl: '../front/front.php',\r\n    signInOptions: [\r\n        // Leave the lines as is for the providers you want to offer your users.\r\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n        firebase.auth.TwitterAuthProvider.PROVIDER_ID,\r\n        firebase.auth.EmailAuthProvider.PROVIDER_ID,\r\n        firebase.auth.PhoneAuthProvider.PROVIDER_ID\r\n    ],\r\n    // Terms of service url.\r\n    tosUrl: 'https://github.com/HiroyukTamura/WSEntryPoint/wiki/%E3%83%97%E3%83%A9%E3%82%A4%E3%83%90%E3%82%B7%E3%83%BC%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC',\r\n    signInSuccessUrl: '../record/index.html'\r\n};\r\n\r\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n    .then(function() {\r\n        let ui = new firebaseui.auth.AuthUI(firebase.auth());\r\n        ui.start('#firebaseui-auth-container', uiConfig);\r\n\r\n    }).catch(function(error) {\r\n        console.log(error.code, error.message);\r\n        $('#about').hide();\r\n    });\r\n\r\nshowDefaultNtf();\r\n\r\n$('#firebase-register .mdl-button').on('click', function (e) {\r\n    $(this).css('visibility', 'hidden');\r\n    $('.firebaseui-idp-button[data-provider-id=\"password\"]').click();\r\n    return false;\r\n});\r\n\r\nfunction showDefaultNtf() {\r\n    let setting = {\r\n        type: 'info',\r\n        newest_on_top: true,\r\n        delay: -1\r\n    };\r\n\r\n    $.notify({\r\n        title: '<strong>本サービスはβ版です</strong></br>',\r\n        message: '不具合が発生したり、入力したデータが失われる場合があります。あらかじめご了承ください。'\r\n    }, setting);\r\n}"]}